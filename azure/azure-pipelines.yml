# Azure DevOps Pipeline for MCP Workflow Server
trigger:
  branches:
    include:
      - main
      - develop
  paths:
    exclude:
      - README.md
      - docs/*

pool:
  vmImage: 'ubuntu-latest'

variables:
  # Azure Container Registry
  dockerRegistryServiceConnection: 'ACR-Connection'
  imageRepository: 'mcp-workflow-server'
  containerRegistry: 'mcpworkflowacr.azurecr.io'
  dockerfilePath: 'azure/Dockerfile.azure'
  tag: '$(Build.BuildId)'
  
  # Azure Web App
  azureSubscription: 'Azure-Subscription'
  appName: 'mcp-workflow-server'
  resourceGroupName: 'mcp-workflow-rg'

stages:
  # Build Stage
  - stage: Build
    displayName: 'Build and Test'
    jobs:
      - job: BuildAndTest
        displayName: 'Build and Test Application'
        steps:
          # Install Node.js
          - task: NodeTool@0
            inputs:
              versionSpec: '20.x'
            displayName: 'Install Node.js'
          
          # Install dependencies
          - script: |
              npm ci
            displayName: 'Install dependencies'
          
          # Run linting
          - script: |
              npm run lint
            displayName: 'Run linting'
            continueOnError: true
          
          # Run tests
          - script: |
              npm test -- --ci --coverage --testResultsProcessor jest-junit
            displayName: 'Run tests'
            continueOnError: true
          
          # Publish test results
          - task: PublishTestResults@2
            inputs:
              testResultsFormat: 'JUnit'
              testResultsFiles: '**/junit.xml'
              failTaskOnFailedTests: false
            displayName: 'Publish test results'
          
          # Publish code coverage
          - task: PublishCodeCoverageResults@1
            inputs:
              codeCoverageTool: 'Cobertura'
              summaryFileLocation: '$(System.DefaultWorkingDirectory)/coverage/cobertura-coverage.xml'
            displayName: 'Publish code coverage'
            continueOnError: true
          
          # Build TypeScript
          - script: |
              npm run build
            displayName: 'Build TypeScript'
            continueOnError: true
          
          # Build Docker image
          - task: Docker@2
            displayName: 'Build Docker image'
            inputs:
              command: buildAndPush
              repository: $(imageRepository)
              dockerfile: $(dockerfilePath)
              containerRegistry: $(dockerRegistryServiceConnection)
              tags: |
                $(tag)
                latest

  # Deploy to Staging
  - stage: DeployStaging
    displayName: 'Deploy to Staging'
    dependsOn: Build
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/develop'))
    jobs:
      - deployment: DeployToStaging
        displayName: 'Deploy to Staging Environment'
        environment: 'staging'
        strategy:
          runOnce:
            deploy:
              steps:
                - task: AzureWebAppContainer@1
                  displayName: 'Deploy to Staging Web App'
                  inputs:
                    azureSubscription: $(azureSubscription)
                    appName: '$(appName)-staging'
                    containers: $(containerRegistry)/$(imageRepository):$(tag)
                
                # Run smoke tests
                - script: |
                    npm install -g newman
                    newman run tests/postman/smoke-tests.json \
                      --environment tests/postman/staging-env.json \
                      --reporters cli,junit \
                      --reporter-junit-export TEST-smoke.xml
                  displayName: 'Run smoke tests'
                  continueOnError: true
                
                # Health check
                - script: |
                    for i in {1..10}; do
                      if curl -f https://$(appName)-staging.azurewebsites.net/health; then
                        echo "Health check passed"
                        exit 0
                      fi
                      echo "Waiting for application to be healthy..."
                      sleep 30
                    done
                    echo "Health check failed"
                    exit 1
                  displayName: 'Health check'

  # Deploy to Production
  - stage: DeployProduction
    displayName: 'Deploy to Production'
    dependsOn: 
      - Build
      - DeployStaging
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
    jobs:
      - deployment: DeployToProduction
        displayName: 'Deploy to Production Environment'
        environment: 'production'
        strategy:
          runOnce:
            deploy:
              steps:
                # Deploy with Blue-Green strategy
                - task: AzureWebAppContainer@1
                  displayName: 'Deploy to Production Slot'
                  inputs:
                    azureSubscription: $(azureSubscription)
                    appName: $(appName)
                    deployToSlotOrASE: true
                    resourceGroupName: $(resourceGroupName)
                    slotName: 'staging'
                    containers: $(containerRegistry)/$(imageRepository):$(tag)
                
                # Warm up the staging slot
                - script: |
                    for i in {1..5}; do
                      curl -f https://$(appName)-staging.azurewebsites.net/health || true
                      sleep 10
                    done
                  displayName: 'Warm up staging slot'
                
                # Run production smoke tests
                - script: |
                    newman run tests/postman/smoke-tests.json \
                      --environment tests/postman/production-staging-env.json \
                      --reporters cli,junit \
                      --reporter-junit-export TEST-production-smoke.xml
                  displayName: 'Run production smoke tests'
                
                # Swap slots
                - task: AzureAppServiceManage@0
                  displayName: 'Swap slots'
                  inputs:
                    azureSubscription: $(azureSubscription)
                    Action: 'Swap Slots'
                    WebAppName: $(appName)
                    ResourceGroupName: $(resourceGroupName)
                    SourceSlot: 'staging'
                
                # Post-deployment validation
                - script: |
                    sleep 60
                    curl -f https://$(appName).azurewebsites.net/health
                  displayName: 'Post-deployment validation'
                
                # Notify deployment
                - task: SendGridEmail@2
                  displayName: 'Send deployment notification'
                  inputs:
                    SendGridApiKey: '$(SendGridApiKey)'
                    FromEmail: 'devops@company.com'
                    ToEmail: 'team@company.com'
                    Subject: 'MCP Workflow Server Deployed to Production'
                    Body: |
                      The MCP Workflow Server has been successfully deployed to production.
                      
                      Build: $(Build.BuildId)
                      Commit: $(Build.SourceVersion)
                      Deployed by: $(Build.RequestedFor)
                  condition: succeeded()
                  continueOnError: true