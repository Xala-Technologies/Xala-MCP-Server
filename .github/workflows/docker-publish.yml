name: Docker Build and Publish

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

env:
  # Docker Hub
  DOCKER_HUB_USERNAME: ${{ vars.DOCKER_HUB_USERNAME || 'mcpworkflow' }}
  
  # GitHub Container Registry
  GHCR_REGISTRY: ghcr.io
  
  # Azure Container Registry
  ACR_REGISTRY: mcpworkflowacr.azurecr.io
  
  # AWS ECR
  ECR_REGISTRY: ${{ vars.ECR_REGISTRY }}
  
  # Image name
  IMAGE_NAME: mcp-workflow-server

jobs:
  build-and-push:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      packages: write
      id-token: write
    
    strategy:
      matrix:
        registry:
          - name: ghcr
            url: ghcr.io
            username: ${{ github.actor }}
            password: GITHUB_TOKEN
          - name: dockerhub
            url: docker.io
            username: DOCKER_HUB_USERNAME
            password: DOCKER_HUB_TOKEN
          - name: acr
            url: mcpworkflowacr.azurecr.io
            username: ACR_USERNAME
            password: ACR_PASSWORD
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to ${{ matrix.registry.name }}
        uses: docker/login-action@v3
        with:
          registry: ${{ matrix.registry.url }}
          username: ${{ matrix.registry.username == 'GITHUB_TOKEN' && github.actor || secrets[matrix.registry.username] }}
          password: ${{ secrets[matrix.registry.password] }}
        if: github.event_name != 'pull_request'
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ matrix.registry.url }}/${{ matrix.registry.name == 'dockerhub' && env.DOCKER_HUB_USERNAME || github.repository_owner }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha,format=short
            type=raw,value=latest,enable={{is_default_branch}}
          labels: |
            org.opencontainers.image.title=MCP Workflow Server
            org.opencontainers.image.description=Intelligent development workflow orchestrator
            org.opencontainers.image.vendor=MCP Workflow Team
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha,scope=${{ matrix.registry.name }}
          cache-to: type=gha,scope=${{ matrix.registry.name }},mode=max
          build-args: |
            BUILD_DATE=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
            VCS_REF=${{ github.sha }}
            VERSION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ fromJSON(steps.meta.outputs.json).tags[0] }}
          format: 'sarif'
          output: 'trivy-results-${{ matrix.registry.name }}.sarif'
        if: github.event_name != 'pull_request'
      
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results-${{ matrix.registry.name }}.sarif'
        if: github.event_name != 'pull_request'

  # Multi-cloud deployment
  deploy-multicloud:
    name: Deploy to Multiple Clouds
    runs-on: ubuntu-latest
    needs: [build-and-push]
    if: github.ref == 'refs/heads/main'
    
    strategy:
      matrix:
        cloud:
          - name: azure
            deploy_script: ./azure/deploy-azure.sh
          - name: aws
            deploy_script: ./aws/deploy-aws.sh
          - name: gcp
            deploy_script: ./gcp/deploy-gcp.sh
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Deploy to ${{ matrix.cloud.name }}
        run: |
          chmod +x ${{ matrix.cloud.deploy_script }}
          ${{ matrix.cloud.deploy_script }}
        env:
          CLOUD_CREDENTIALS: ${{ secrets[format('{0}_CREDENTIALS', matrix.cloud.name)] }}
        continue-on-error: true